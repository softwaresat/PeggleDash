#include "Peg.h"
#include "GameObject.h"
#include <cstdint>
#include <iostream>



const unsigned short bluepeg[] = {
 0x0020, 0x0020, 0x0000, 0x0820, 0x0820, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x58C0, 0x9961, 0x99A1, 0x6101, 0x0000, 0x0000,
 0x0000, 0x58C1, 0xC9E1, 0xC201, 0xB1A1, 0xC1E1, 0x5901, 0x0000, 0x0800, 0xA9C1, 0xDB41, 0xDB42, 0xCAA1, 0xB9C1, 0x9141, 0x0000,
 0x0800, 0xC323, 0xF566, 0xE4A2, 0xDB82, 0xCA41, 0x8921, 0x0020, 0x0000, 0x79E1, 0xFF13, 0xF608, 0xEC21, 0xD241, 0x58A0, 0x0000,
 0x0020, 0x0000, 0x7A23, 0xCBC5, 0xBA81, 0x60C1, 0x0000, 0x0000, 0x0020, 0x0020, 0x0000, 0x0800, 0x0800, 0x0000, 0x0000, 0x0020,
};

const unsigned short bluepeghit[] = {
 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x30A0, 0x8A60, 0x8A40, 0x2880, 0x0000, 0x0020,
 0x0000, 0x30A0, 0xF542, 0xFEA4, 0xFE83, 0xECC1, 0x2880, 0x0000, 0x0000, 0x9B21, 0xFF68, 0xF72E, 0xF70B, 0xFEC4, 0x8A80, 0x0000,
 0x0000, 0xA382, 0xFFF0, 0xF795, 0xF772, 0xFF27, 0x9AE0, 0x0000, 0x0000, 0x4120, 0xFF0E, 0xFFF4, 0xFFCD, 0xFE24, 0x38E0, 0x0000,
 0x0020, 0x0000, 0x4940, 0xB403, 0xB3E2, 0x4120, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000,
};

const unsigned short orangepeg[] = {
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00CB, 0x0175, 0x0195, 0x00EC, 0x0000, 0x0000,
 0x0000, 0x00EC, 0x027D, 0x029B, 0x023A, 0x021C, 0x00EC, 0x0000, 0x0000, 0x0237, 0x037D, 0x035C, 0x02FB, 0x023A, 0x0174, 0x0000,
 0x0000, 0x02D8, 0x14BF, 0x03FD, 0x035C, 0x029C, 0x0154, 0x0000, 0x0000, 0x016E, 0x561F, 0x253F, 0x039D, 0x029E, 0x00CC, 0x0000,
 0x0020, 0x0000, 0x09AE, 0x1338, 0x0258, 0x010D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000,
};

const unsigned short orangepeghit[] = {
 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x00A6, 0x0272, 0x0252, 0x0085, 0x0000, 0x0020,
 0x0000, 0x00A6, 0x053F, 0x065F, 0x063F, 0x04BE, 0x0086, 0x0000, 0x0000, 0x0313, 0x06FF, 0x0EDE, 0x0E9E, 0x065F, 0x0292, 0x0000,
 0x0000, 0x0374, 0x1F7F, 0x173E, 0x16FE, 0x069F, 0x02D3, 0x0000, 0x0000, 0x0108, 0x3EDF, 0x37BF, 0x073F, 0x05DF, 0x00E8, 0x0000,
 0x0020, 0x0000, 0x0149, 0x0BD6, 0x0396, 0x0129, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000,
};




Peg::Peg() {
    this->x = 0;
    this->y = 0;
    this->hits = 1; // Default to 1 hit to destroy
    this->needsErase = false; // Initialize needsErase to false
    w = 8;
    h = 8;
}

void Peg::init(int32_t x, int32_t y, int8_t hits, int8_t color) {
    this->x = x;
    this->y = y;
    this->hits = 1; // Initialize with 1 hit to destroy
    this->needsErase = false; // Reset needsErase flag
    this->w = 8;
    this->h = 8;

    if (color == 1) {
        image = orangepeg;
    } 
    else {
        image = bluepeg;
    }
}

int32_t Peg::getX(){
    return x;
}

int32_t Peg::getY(){
    return y;
}

uint16_t Peg::getW(){
    return w;
}

uint16_t Peg::getH(){
    return h;
}

const uint16_t* Peg::getImage(){
    return image;
}

void Peg::updatePeg(){
    hits--;
}

bool Peg::isDestroyed() {
    return hits <= 0;
}
