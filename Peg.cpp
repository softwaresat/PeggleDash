#include "Peg.h"
#include "GameObject.h"
#include <cstdint>
#include <iostream>



const unsigned short bluepeg[] = {
 0x0020, 0x0020, 0x0000, 0x0820, 0x0820, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x58C0, 0x9961, 0x99A1, 0x6101, 0x0000, 0x0000,
 0x0000, 0x58C1, 0xC9E1, 0xC201, 0xB1A1, 0xC1E1, 0x5901, 0x0000, 0x0800, 0xA9C1, 0xDB41, 0xDB42, 0xCAA1, 0xB9C1, 0x9141, 0x0000,
 0x0800, 0xC323, 0xF566, 0xE4A2, 0xDB82, 0xCA41, 0x8921, 0x0020, 0x0000, 0x79E1, 0xFF13, 0xF608, 0xEC21, 0xD241, 0x58A0, 0x0000,
 0x0020, 0x0000, 0x7A23, 0xCBC5, 0xBA81, 0x60C1, 0x0000, 0x0000, 0x0020, 0x0020, 0x0000, 0x0800, 0x0800, 0x0000, 0x0000, 0x0020,
};

const unsigned short bluepeghit[] = {
<<<<<<< HEAD
 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x30A0, 0x8A60, 0x8A40, 0x2880, 0x0000, 0x0020,
 0x0000, 0x30A0, 0xF542, 0xFEA4, 0xFE83, 0xECC1, 0x2880, 0x0000, 0x0000, 0x9B21, 0xFF68, 0xF72E, 0xF70B, 0xFEC4, 0x8A80, 0x0000,
 0x0000, 0xA382, 0xFFF0, 0xF795, 0xF772, 0xFF27, 0x9AE0, 0x0000, 0x0000, 0x4120, 0xFF0E, 0xFFF4, 0xFFCD, 0xFE24, 0x38E0, 0x0000,
 0x0020, 0x0000, 0x4940, 0xB403, 0xB3E2, 0x4120, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000,
=======
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1820, 0x38A0, 0x38A0, 0x1020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x1820, 0x9A20, 0xE400, 0xF4A0, 0xF480, 0xE3C0, 0x89E0, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x1820, 0xD360, 0xFDA1, 0xFE02, 0xFE03, 0xFDE2, 0xFDC2, 0xFD41, 0xC2E0, 0x1000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0xAA80, 0xFE02, 0xF644, 0xFEA6, 0xFEA6, 0xFEA6, 0xFE64, 0xF5E2, 0xFD81, 0x9200, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x2860, 0xF501, 0xFEA5, 0xFEE8, 0xFF2B, 0xFF2B, 0xFF0A, 0xFEC7, 0xFE65, 0xFE02, 0xEC00, 0x1820, 0x0000, 0x0000,
 0x0000, 0x0000, 0x5920, 0xFE03, 0xFEE8, 0xFF4D, 0xFF70, 0xFF70, 0xFF6F, 0xFF2B, 0xFEC7, 0xFE43, 0xFD01, 0x40C0, 0x0000, 0x0000,
 0x0820, 0x0000, 0x6140, 0xFE64, 0xFF0A, 0xFF70, 0xFFB3, 0xFFB3, 0xFF92, 0xFF6F, 0xFF09, 0xFE64, 0xFD41, 0x48E0, 0x0000, 0x0000,
 0x0000, 0x0000, 0x38A0, 0xFDE3, 0xFF4D, 0xFF92, 0xFFB3, 0xFFB4, 0xFF93, 0xFF70, 0xFF0A, 0xFE84, 0xF4C1, 0x2860, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0xCBC0, 0xFF8D, 0xFFDD, 0xFFB4, 0xFF92, 0xFF92, 0xFF4E, 0xFEC8, 0xFE83, 0xBB00, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x38A0, 0xF522, 0xFFB1, 0xFFB6, 0xFF2D, 0xFF2C, 0xFF09, 0xFEC5, 0xECA1, 0x3060, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x40A0, 0xD401, 0xFE45, 0xFEC6, 0xFEA5, 0xFE03, 0xD3C1, 0x38A0, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0x5100, 0x8200, 0x8200, 0x5100, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x0820, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
>>>>>>> 418a656d28b85260a48d4ee6dad2de8ddc9f9f0c
};

const unsigned short orangepeg[] = {
 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00CB, 0x0175, 0x0195, 0x00EC, 0x0000, 0x0000,
 0x0000, 0x00EC, 0x027D, 0x029B, 0x023A, 0x021C, 0x00EC, 0x0000, 0x0000, 0x0237, 0x037D, 0x035C, 0x02FB, 0x023A, 0x0174, 0x0000,
 0x0000, 0x02D8, 0x14BF, 0x03FD, 0x035C, 0x029C, 0x0154, 0x0000, 0x0000, 0x016E, 0x561F, 0x253F, 0x039D, 0x029E, 0x00CC, 0x0000,
 0x0020, 0x0000, 0x09AE, 0x1338, 0x0258, 0x010D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000,
};

const unsigned short orangepeghit[] = {
 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x00A6, 0x0272, 0x0252, 0x0085, 0x0000, 0x0020,
 0x0000, 0x00A6, 0x053F, 0x065F, 0x063F, 0x04BE, 0x0086, 0x0000, 0x0000, 0x0313, 0x06FF, 0x0EDE, 0x0E9E, 0x065F, 0x0292, 0x0000,
 0x0000, 0x0374, 0x1F7F, 0x173E, 0x16FE, 0x069F, 0x02D3, 0x0000, 0x0000, 0x0108, 0x3EDF, 0x37BF, 0x073F, 0x05DF, 0x00E8, 0x0000,
 0x0020, 0x0000, 0x0149, 0x0BD6, 0x0396, 0x0129, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000,
};

Peg::Peg(int32_t x_pos, int32_t y_pos, int32_t initial_hits) : 
    GameObject(x_pos, y_pos, 16, 16, nullptr), 
    hits(initial_hits),
    prevScreenX(0),
    prevScreenY(0),
    needsRedraw(false) {
    
    // Set initial image based on hits
    updatePeg();
}

Peg::~Peg() {
    // Destructor for Peg (empty as we don't allocate additional resources)
}

void Peg::updatePeg() {
    if (hits <= 0) {
        // Peg is destroyed
        image = nullptr;
        // Optionally set width/height to 0 if it should disappear completely
        w = 0;
        h = 0;
    } else if (hits == 1) {
        // Blue peg (1 hit left)
        image = bluepeg;
    } else if (hits == 2) {
        // Orange peg (2 hits left)
        image = orangepeg;
    } else if (hits == 3) {
        // Special case for pegs with more than 2 hits (if implemented)
        image = orangepeg; // Use orange for now
    }
    
    needsRedraw = true; // Mark for redraw whenever state changes
}
