#include "Hole.h"
#include "GameObject.h"
#include <cstdint>
#include <iostream>

const unsigned short bucket[] = {
 // Row 0
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 1
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 2
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 3
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 4
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 5
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 6 (Original starts at index 288)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0062, 0x08E5, 0x1148, 0x11AA, 0x11CB, 0x1A0C, 0x1A2D, 0x1A2D, 0x1A2D, 0x1A2D, 0x1A2D, 0x1A0D, 0x120C, 0x11EC, 0x11CA, 0x1189, 0x0948, 0x0906, 0x08A4, 0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 7 (Original starts at index 336)
0x0000, 0x0000, 0x0000, 0x0883, 0x22D0, 0x33B6, 0x3417, 0x3C38, 0x3C39, 0x3C39, 0x3438, 0x3418, 0x3418, 0x33F8, 0x33F7, 0x2BD7, 0x2BB7, 0x2BB6, 0x2B96, 0x2B96, 0x2375, 0x2355, 0x2334, 0x2313, 0x1AB0, 0x19EC, 0x0042, 0x0000, 0x0000, 0x0000,
// Row 8 (Original starts at index 384)
0x0000, 0x0000, 0x0000, 0x22AF, 0x449A, 0x4479, 0x3C58, 0x3C38, 0x3C18, 0x3C17, 0x33F7, 0x33F7, 0x33D7, 0x33D6, 0x33B6, 0x2BB6, 0x2B95, 0x2B95, 0x2B75, 0x2B75, 0x2354, 0x2334, 0x2333, 0x2313, 0x22D2, 0x2313, 0x19EB, 0x0000, 0x0000, 0x0000,
// Row 9 (Original starts at index 432)
0x0000, 0x0000, 0x0000, 0x2B32, 0x3C58, 0x4458, 0x3C58, 0x3C38, 0x3C38, 0x3C18, 0x3417, 0x33F7, 0x33F7, 0x33D7, 0x33D6, 0x33B6, 0x2BB6, 0x2B96, 0x2B95, 0x2B75, 0x2354, 0x2354, 0x2333, 0x2313, 0x22D2, 0x22F2, 0x1A2D, 0x0000, 0x0000, 0x0000,
// Row 10 (Original starts at index 480)
0x0000, 0x0000, 0x0000, 0x2B32, 0x4458, 0x4478, 0x4479, 0x4459, 0x3C58, 0x3C38, 0x3C38, 0x3418, 0x3418, 0x33F7, 0x33F7, 0x33D7, 0x2BD7, 0x2BB6, 0x2BB6, 0x2B95, 0x2B75, 0x2354, 0x2334, 0x2333, 0x22D2, 0x22F2, 0x1A2D, 0x0000, 0x0000, 0x0000,
// Row 11 (Original starts at index 528)
0x0000, 0x0000, 0x0000, 0x2B53, 0x3C59, 0x3C38, 0x33F7, 0x2BD6, 0x2BB6, 0x2B95, 0x2B74, 0x2B53, 0x2B33, 0x2B33, 0x2B32, 0x2B12, 0x2312, 0x2312, 0x2312, 0x22F2, 0x22F2, 0x1AF2, 0x1AF3, 0x1AF3, 0x1AD2, 0x1AF3, 0x1A4E, 0x0000, 0x0000, 0x0000,
// Row 12 (Original starts at index 576)
0x0000, 0x0000, 0x0000, 0x2A8D, 0x430E, 0x4AEC, 0x530B, 0x5B0A, 0x5AE9, 0x62E9, 0x62E8, 0x62E8, 0x62E8, 0x62E8, 0x62E8, 0x62C7, 0x62C7, 0x62C7, 0x5AA7, 0x5AA7, 0x5288, 0x5288, 0x4A68, 0x4248, 0x3A49, 0x326C, 0x2A0A, 0x0000, 0x0000, 0x0000,
// Row 13 (Original starts at index 624)
0x0000, 0x0000, 0x41C4, 0x7B48, 0x8BA9, 0x8BEA, 0x942C, 0x8C0B, 0x7B89, 0x7B89, 0x7B89, 0x7B89, 0x7B69, 0x7B69, 0x7369, 0x7369, 0x7349, 0x7349, 0x7348, 0x7328, 0x7328, 0x7308, 0x6B07, 0x6AE7, 0x6AC6, 0x6285, 0x6AA6, 0x3983, 0x0000, 0x0000,
// Row 14 (Original starts at index 672)
0x0000, 0x0000, 0x62C8, 0x83CA, 0x8C0C, 0x944D, 0x9CAF, 0x9CAE, 0x944D, 0x944D, 0x946D, 0x944D, 0x944D, 0x8C2D, 0x8C2D, 0x8C2D, 0x8C2D, 0x8C0C, 0x8C0C, 0x83EC, 0x83CB, 0x7BAB, 0x7B6A, 0x7349, 0x6B08, 0x62A7, 0x6AE7, 0x5246, 0x0000, 0x0000,
// Row 15 (Original starts at index 720)
0x0000, 0x0000, 0x6B08, 0x9C4D, 0x946E, 0x944D, 0x8BEC, 0x83AB, 0x734A, 0x6B09, 0x6AE8, 0x62C8, 0x62A7, 0x62A7, 0x5A87, 0x5A87, 0x5A87, 0x6287, 0x62A7, 0x62C8, 0x6AE8, 0x7329, 0x734A, 0x7B6A, 0x7B8A, 0x7B6A, 0x83AA, 0x5A87, 0x0000, 0x0000,
// Row 16 (Original starts at index 768)
0x0000, 0x0000, 0x5A88, 0x8BCB, 0x5A46, 0x49C4, 0x4183, 0x3942, 0x3121, 0x3101, 0x28E1, 0x28E1, 0x28E1, 0x28E1, 0x3101, 0x3101, 0x3101, 0x3101, 0x3121, 0x3942, 0x3962, 0x4183, 0x49C3, 0x5204, 0x5A65, 0x6AC7, 0x83AB, 0x4206, 0x0000, 0x0000,
// Row 17 (Original starts at index 816)
0x0000, 0x0000, 0x0000, 0x1081, 0x2923, 0x3184, 0x41C5, 0x4A05, 0x4A26, 0x5226, 0x5246, 0x5226, 0x5226, 0x5226, 0x5246, 0x5246, 0x5246, 0x5246, 0x5246, 0x5226, 0x4A26, 0x49E5, 0x41C5, 0x3164, 0x2103, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 18 (Original starts at index 864)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x0040, 0x0040, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 19
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 20
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 21
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 22
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
// Row 23
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};






Hole::Hole(){
    x = 0;
    y = 167*256;
    xprev = 0;
    yprev = 0;
    vx = 256;
    h = 24;
    w = 30;
    image = bucket;
}

void Hole::reset(){
    x = 0;
    y = 184*256;
}

int32_t Hole::getX(){
    return x;
}

int32_t Hole::getY(){
    return y;
}

void Hole::setXPrev(int32_t xval){
    xprev = xval;
}

void Hole::setYPrev(int32_t yval){
    yprev = yval;
}

int32_t Hole::getXPrev(){
    return xprev;
}

int32_t Hole::getYPrev(){
    return yprev;
}

void Hole::moveHole(){
     x += vx;

    if((x >> 8) + 30 >= 128 || (x >> 8) <= 0){
        vx = -vx;
    }
}

bool Hole::getActive(){
    return active;
}

void Hole::setActive(){
    active = true;
}

 const uint16_t* Hole::getImage(){
    return image;
 }